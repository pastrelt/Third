"""
Django settings for News_Portal project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_w1qf8)2+++9au^^8kjcv683jl6mdj76$@2-h@jau790no^gc4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [

# The following apps are required:
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'articles',

    # Доступ.
    'sign',
    'protect',

    # Подключаем ещё приложения.
    'django.contrib.sites',
    'django.contrib.flatpages',

    # Доступ к фильтрам в приложении‘django_filters’.
    # Работает при установке пакета: python -m pip install django-filter.
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... включите поставщиков, которых вы хотите включить:
    'allauth.socialaccount.providers.google',

    # Приложение, которое может помочь вам просматривать все настройки URL проекта.
    'django_extensions',

    # Для периодического запуска задачи отправки писем, использую планировщик задач Celery.
    'celery',
]

#CELERY_BROKER_URL = 'redis://localhost:6379/0'
#CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

CELERY_BROKER_URL = 'redis://localhost:6379' # указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379.
CELERY_RESULT_BACKEND = 'redis://localhost:6379' # указывает на хранилище результатов выполнения задач.
CELERY_ACCEPT_CONTENT = ['application/json'] # допустимый формат данных.
CELERY_TASK_SERIALIZER = 'json' # метод сериализации задач.
CELERY_RESULT_SERIALIZER = 'json' # метод сериализации результатов.

#BROKER_CONNECTION_RETRY_ON_STARTUP = True

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',

    # добавил по причине ошибки при миграции данных в модуле D8 урок 4.
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'News_Portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Это верная настройка 'DIRS' не троать!
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                # `allauth` нужно это от Джанго.
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    # Необходимо войти в систему по имени пользователя в администраторе Django, независимо от `allauth`.
    'django.contrib.auth.backends.ModelBackend',

    # Cпециальные методы аутентификации `allauth`, такие как вход по электронной почте.
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'News_Portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# После этого, когда пользователь попытается получить доступ к защищенной странице без аутентификации,
# он будет перенаправлен на страницу входа, указанную в переменной LOGIN_URL.
# Конкретизация URL-адреса, на котором находится страница аутентификации (в примере это sign/login/),
# а также страница, на которую перенаправляется пользователь после успешного входа на сайт,
# в данном случае корневая страница сайта.
LOGIN_URL = 'accounts/login/'
#LOGIN_URL = 'sign/login/'
LOGIN_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# Чтобы allauth распознал нашу форму как ту, что должна выполняться вместо формы по умолчанию,
# необходимо добавить строчку в файл настроек проекта settings.py:
ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

# Настройки для отправки писем.
EMAIL_HOST = 'smtp.yandex.ru'  # Адрес сервера Яндекс-почты для всех один и тот же.
EMAIL_PORT = 465  # Порт smtp сервера тоже одинаковый.
EMAIL_HOST_USER = 'passtreltsov'  # Имя почтовоого ящика ( до собаки ) отправителя.
EMAIL_HOST_PASSWORD = 'uzsjmibnpkxffmyf'  # Пароль от почты.
EMAIL_USE_SSL = True  # Яндекс использует ssl.

# Здесь указываем уже свою ПОЛНУЮ почту, с которой будут отправляться письма.
DEFAULT_FROM_EMAIL = 'passtreltsov@yandex.ru'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # Подотовка.
    'formatters': {
        # 1. В консоль должны выводиться все сообщения уровня DEBUG и выше,
            # включающие время,
            # уровень сообщения,
            # сообщения.
        'verbose': {
            'format': '%(asctime)s - %(levelname)s - %(message)s'
        },
        # 1. Для сообщений WARNING и выше дополнительно должен выводиться
            # путь к источнику события (используется аргумент pathname в форматировании).
        'source': {
            'format': '%(asctime)s - %(levelname)s - %(pathname)s - %(message)s'
        },
        # 1. А для сообщений ERROR и CRITICAL еще должен выводить
            # стэк ошибки (аргумент exc_info).
        'error': {
            'format': '%(asctime)s - %(levelname)s - %(pathname)s - %(message)s\n%(exc_info)s\n' # перевод строки нужен для повышения читаемости кода.
        },
        # 2. В файл general.log должны выводиться сообщения уровня INFO и выше только с указанием
            # времени,
            # уровня логирования,
            # модуля, в котором возникло сообщение (аргумент module) и само
            # сообщение. Сюда также попадают сообщения с регистратора django.
        'info': {
            'format': '%(asctime)s - %(levelname)s - %(module)s - %(message)s'
        },
        # 4. В файл security.log должны попадать только сообщения, связанные с безопасностью,
        # а значит только из логгера django.security. Формат вывода предполагает
            # время,
            # уровень логирования,
            # модуль и
            # сообщение.
        'security': {
            'format': '%(asctime)s - %(levelname)s - %(module)s - %(message)s'
        },
        # 5. На почту должны отправляться сообщения уровней ERROR и выше.
        # По формату, как в errors.log, но без стэка ошибок.
        'mail': {
            'format': '%(asctime)s - %(levelname)s - %(pathname)s - %(message)s'
        },
    },

    # Фильтр.
    # ... при помощи фильтров нужно указать,
    'filters': {
        # что в консоль сообщения отправляются только при DEBUG = True,
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        # ..., а на почту и в файл general.log — только при DEBUG = False.
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    # Обработка.
    'handlers': {
        # 1. В консоль должны выводиться все сообщения уровня DEBUG и выше.
        # + фильтр на 'DEBUG'
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        # 1. В консоль для сообщений WARNING и выше дополнительно должен выводиться
        # путь к источнику события (используется аргумент pathname в форматировании).
        # + фильтр на 'DEBUG'
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'source',
        },
        # 1. В консоль для сообщений ERROR и CRITICAL еще
        # должен выводить стэк ошибки (аргумент exc_info).
        # + фильтр на 'DEBUG'
        'console_error': {
            'level': 'ERROR',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'error',
        },
        # 2. В файл general.log должны выводиться сообщения уровня INFO и выше.
        'file_general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'News_Portal/log/general.log',  # Путь к файлу general.log
            'encoding': 'utf-8',  # Установка кодировки на utf-8
            'formatter': 'info',
        },
        # 3. В файл errors.log должны выводиться сообщения только уровня ERROR и CRITICAL.
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'News_Portal/log/errors.log',  # Путь к файлу errors.log
            'formatter': 'error',
        },
        #4. В файл security.log должны попадать только сообщения, связанные с безопасностью.
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'News_Portal/log/security.log',  # Путь к файлу security.log
            'encoding': 'utf-8',  # Установка кодировки на utf-8
            'formatter': 'security',
        },
        # 5. На почту должны отправляться сообщения уровней ERROR и выше.
        # + фильтр на 'DEBUG'
        'mail_errors_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail',
        },
    },

    # Логирование.
    'loggers': {
        # 1. В консоль должны выводиться все сообщения уровня DEBUG и выше,
        # cюда должны попадать все сообщения с основного логгера django.
        'django': {
            'handlers': ['console_debug',
                         'console_warning',
                         'console_error',
                         ],
            'level': 'DEBUG',
            'propagate': True,
        },
        # 2. В файл general.log должны выводиться сообщения уровня INFO и выше,
        # cюда также попадают сообщения с регистратора django.
        'django_general': {
            'handlers': ['file_general',],
            'level': 'INFO',
            'propagate': True,
        },
        # 3. В этот файл должны попадать сообщения только из логгеров
        # django.request,
        # django.server,
        # django.template,
        # django.db.backends.
        'django.request': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        #4. В файл security.log должны попадать только сообщения, связанные с безопасностью
        'django.security': {
            'handlers': ['file_security'],
            'level': 'INFO',
            'propagate': False,
        },
        # 5. На почту должны отправляться сообщения уровней ERROR и выше из
        # django.request и
        # django.server.
        'django.request': {
            'handlers': ['mail_errors_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['mail_errors_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

